// first error event loop

// fs module
// readFile readFileSync

// write file 

//  exist accsss

// watch

// cmod

// clode open

//  what is stream chunk ?

// path module
// join  __dirname

// resolve

// normilize

// format parse extname

// readline module

// createInterface



// Lesson 4 

// Child processes

// exec with shell
// execFile without shell

// spawn
// fork, part of s

//options.stdio after stream



// Clusters


// algorithms

// round robin

// concepts

// concurrency
// parallelism

// cluster module



// Lesson 5

// npm init
// npm install typescript
// create tsconfig.file


// source map

// createInterface
// implements // class X implements Car

// Lesson 6

// streams and buffers

// all streams extends eventemmiter

//writable readable deplex and transform

// in node js buuffer is type

// stream.pause(), stream.resume()

// stream.pipe(output)

// on emit

close - always works, 
end - readable .. henc karda prcni
finish - writable, henc grec verjacrec

// check close event in error node v 16

// lesson-7 

runtype


// put overwirite in url endpoint

// path append
http>tcp> layers

// express fraemwork for node js 

// npm i express

// lesson 8

docer types (5)

// docker run -p 3000:3000 dir 


// lesson 9

typescript

// ENUM

enum Gender {
    MALE='male',
    FEMALE='femalse'
}

enum Color {
    RED="red",
    BLACK="black"
}

interface ? - 
interface readonly

type vs interface

// namespace, external, internal modules
// generic examples
webpack config js file

// homework 10



